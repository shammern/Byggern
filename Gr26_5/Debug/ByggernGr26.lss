
ByggernGr26.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800100  000010f0  00001184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800306  00800306  0000138a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000138a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028ee  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f8c  00000000  00000000  00003efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012db  00000000  00000000  00004e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00006168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000869  00000000  00000000  0000661c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f41  00000000  00000000  00006e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00007dc6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <OLED_credits+0x2c>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 ef       	ldi	r30, 0xF0	; 240
     37c:	f0 e1       	ldi	r31, 0x10	; 16
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a6 30       	cpi	r26, 0x06	; 6
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a6 e0       	ldi	r26, 0x06	; 6
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a2 32       	cpi	r26, 0x22	; 34
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <main>
     39e:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_init>:
	printf("The Left slider value is : %d\n",Slide->l_slider);
	printf("Y NEUTRAL IS : %d\n", Stick->y_neutralPoint);
	printf("X NEUTRAL IS : %d\n", Stick->x_neutralPoint);
	
	
}
     3a6:	81 b3       	in	r24, 0x11	; 17
     3a8:	80 62       	ori	r24, 0x20	; 32
     3aa:	81 bb       	out	0x11, r24	; 17
     3ac:	8f b5       	in	r24, 0x2f	; 47
     3ae:	83 64       	ori	r24, 0x43	; 67
     3b0:	8f bd       	out	0x2f, r24	; 47
     3b2:	8e b5       	in	r24, 0x2e	; 46
     3b4:	89 61       	ori	r24, 0x19	; 25
     3b6:	8e bd       	out	0x2e, r24	; 46
     3b8:	81 b3       	in	r24, 0x11	; 17
     3ba:	8f 7e       	andi	r24, 0xEF	; 239
     3bc:	81 bb       	out	0x11, r24	; 17
     3be:	88 b3       	in	r24, 0x18	; 24
     3c0:	80 61       	ori	r24, 0x10	; 16
     3c2:	88 bb       	out	0x18, r24	; 24
     3c4:	08 95       	ret

000003c6 <adc_read>:
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	8c 01       	movw	r16, r24
     3d0:	eb 01       	movw	r28, r22
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	74 e1       	ldi	r23, 0x14	; 20
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 44 06 	call	0xc88	; 0xc88 <xmem_write>
     3dc:	85 e0       	ldi	r24, 0x05	; 5
     3de:	8a 95       	dec	r24
     3e0:	f1 f7       	brne	.-4      	; 0x3de <adc_read+0x18>
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	94 e1       	ldi	r25, 0x14	; 20
     3e6:	0e 94 48 06 	call	0xc90	; 0xc90 <xmem_read>
     3ea:	f8 01       	movw	r30, r16
     3ec:	81 83       	std	Z+1, r24	; 0x01
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	94 e1       	ldi	r25, 0x14	; 20
     3f2:	0e 94 48 06 	call	0xc90	; 0xc90 <xmem_read>
     3f6:	f8 01       	movw	r30, r16
     3f8:	80 83       	st	Z, r24
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	94 e1       	ldi	r25, 0x14	; 20
     3fe:	0e 94 48 06 	call	0xc90	; 0xc90 <xmem_read>
     402:	88 83       	st	Y, r24
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	94 e1       	ldi	r25, 0x14	; 20
     408:	0e 94 48 06 	call	0xc90	; 0xc90 <xmem_read>
     40c:	89 83       	std	Y+1, r24	; 0x01
     40e:	83 ed       	ldi	r24, 0xD3	; 211
     410:	90 e3       	ldi	r25, 0x30	; 48
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	f1 f7       	brne	.-4      	; 0x412 <__DATA_REGION_LENGTH__+0x12>
     416:	00 c0       	rjmp	.+0      	; 0x418 <__DATA_REGION_LENGTH__+0x18>
     418:	00 00       	nop
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	08 95       	ret

00000424 <joyStickPos>:
     424:	fc 01       	movw	r30, r24
     426:	64 81       	ldd	r22, Z+4	; 0x04
     428:	45 81       	ldd	r20, Z+5	; 0x05
     42a:	80 81       	ld	r24, Z
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	9b 01       	movw	r18, r22
     432:	26 5f       	subi	r18, 0xF6	; 246
     434:	3f 4f       	sbci	r19, 0xFF	; 255
     436:	28 17       	cp	r18, r24
     438:	39 07       	cpc	r19, r25
     43a:	9c f4       	brge	.+38     	; 0x462 <joyStickPos+0x3e>
     43c:	9c 01       	movw	r18, r24
     43e:	26 1b       	sub	r18, r22
     440:	37 0b       	sbc	r19, r23
     442:	54 e6       	ldi	r21, 0x64	; 100
     444:	52 9f       	mul	r21, r18
     446:	c0 01       	movw	r24, r0
     448:	53 9f       	mul	r21, r19
     44a:	90 0d       	add	r25, r0
     44c:	11 24       	eor	r1, r1
     44e:	2f ef       	ldi	r18, 0xFF	; 255
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	d9 01       	movw	r26, r18
     454:	a6 1b       	sub	r26, r22
     456:	b7 0b       	sbc	r27, r23
     458:	bd 01       	movw	r22, r26
     45a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__divmodhi4>
     45e:	62 83       	std	Z+2, r22	; 0x02
     460:	14 c0       	rjmp	.+40     	; 0x48a <joyStickPos+0x66>
     462:	9b 01       	movw	r18, r22
     464:	2a 50       	subi	r18, 0x0A	; 10
     466:	31 09       	sbc	r19, r1
     468:	82 17       	cp	r24, r18
     46a:	93 07       	cpc	r25, r19
     46c:	6c f4       	brge	.+26     	; 0x488 <joyStickPos+0x64>
     46e:	9c 01       	movw	r18, r24
     470:	26 1b       	sub	r18, r22
     472:	37 0b       	sbc	r19, r23
     474:	54 e6       	ldi	r21, 0x64	; 100
     476:	52 9f       	mul	r21, r18
     478:	c0 01       	movw	r24, r0
     47a:	53 9f       	mul	r21, r19
     47c:	90 0d       	add	r25, r0
     47e:	11 24       	eor	r1, r1
     480:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__divmodhi4>
     484:	62 83       	std	Z+2, r22	; 0x02
     486:	01 c0       	rjmp	.+2      	; 0x48a <joyStickPos+0x66>
     488:	12 82       	std	Z+2, r1	; 0x02
     48a:	81 81       	ldd	r24, Z+1	; 0x01
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	64 2f       	mov	r22, r20
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	9b 01       	movw	r18, r22
     494:	26 5f       	subi	r18, 0xF6	; 246
     496:	3f 4f       	sbci	r19, 0xFF	; 255
     498:	28 17       	cp	r18, r24
     49a:	39 07       	cpc	r19, r25
     49c:	9c f4       	brge	.+38     	; 0x4c4 <joyStickPos+0xa0>
     49e:	9c 01       	movw	r18, r24
     4a0:	26 1b       	sub	r18, r22
     4a2:	37 0b       	sbc	r19, r23
     4a4:	44 e6       	ldi	r20, 0x64	; 100
     4a6:	42 9f       	mul	r20, r18
     4a8:	c0 01       	movw	r24, r0
     4aa:	43 9f       	mul	r20, r19
     4ac:	90 0d       	add	r25, r0
     4ae:	11 24       	eor	r1, r1
     4b0:	2f ef       	ldi	r18, 0xFF	; 255
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	a9 01       	movw	r20, r18
     4b6:	46 1b       	sub	r20, r22
     4b8:	57 0b       	sbc	r21, r23
     4ba:	ba 01       	movw	r22, r20
     4bc:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__divmodhi4>
     4c0:	63 83       	std	Z+3, r22	; 0x03
     4c2:	08 95       	ret
     4c4:	9b 01       	movw	r18, r22
     4c6:	2a 50       	subi	r18, 0x0A	; 10
     4c8:	31 09       	sbc	r19, r1
     4ca:	82 17       	cp	r24, r18
     4cc:	93 07       	cpc	r25, r19
     4ce:	6c f4       	brge	.+26     	; 0x4ea <joyStickPos+0xc6>
     4d0:	9c 01       	movw	r18, r24
     4d2:	26 1b       	sub	r18, r22
     4d4:	37 0b       	sbc	r19, r23
     4d6:	44 e6       	ldi	r20, 0x64	; 100
     4d8:	42 9f       	mul	r20, r18
     4da:	c0 01       	movw	r24, r0
     4dc:	43 9f       	mul	r20, r19
     4de:	90 0d       	add	r25, r0
     4e0:	11 24       	eor	r1, r1
     4e2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__divmodhi4>
     4e6:	63 83       	std	Z+3, r22	; 0x03
     4e8:	08 95       	ret
     4ea:	13 82       	std	Z+3, r1	; 0x03
     4ec:	08 95       	ret

000004ee <joyStickDir>:
     4ee:	fc 01       	movw	r30, r24
     4f0:	42 81       	ldd	r20, Z+2	; 0x02
     4f2:	24 2f       	mov	r18, r20
     4f4:	04 2e       	mov	r0, r20
     4f6:	00 0c       	add	r0, r0
     4f8:	33 0b       	sbc	r19, r19
     4fa:	33 23       	and	r19, r19
     4fc:	1c f4       	brge	.+6      	; 0x504 <__stack+0x5>
     4fe:	31 95       	neg	r19
     500:	21 95       	neg	r18
     502:	31 09       	sbc	r19, r1
     504:	fc 01       	movw	r30, r24
     506:	33 81       	ldd	r19, Z+3	; 0x03
     508:	83 2f       	mov	r24, r19
     50a:	03 2e       	mov	r0, r19
     50c:	00 0c       	add	r0, r0
     50e:	99 0b       	sbc	r25, r25
     510:	99 23       	and	r25, r25
     512:	1c f4       	brge	.+6      	; 0x51a <__stack+0x1b>
     514:	91 95       	neg	r25
     516:	81 95       	neg	r24
     518:	91 09       	sbc	r25, r1
     51a:	82 17       	cp	r24, r18
     51c:	80 f4       	brcc	.+32     	; 0x53e <__stack+0x3f>
     51e:	43 33       	cpi	r20, 0x33	; 51
     520:	34 f0       	brlt	.+12     	; 0x52e <__stack+0x2f>
     522:	87 e2       	ldi	r24, 0x27	; 39
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 02 07 	call	0xe04	; 0xe04 <puts>
     52a:	82 e0       	ldi	r24, 0x02	; 2
     52c:	08 95       	ret
     52e:	4e 3c       	cpi	r20, 0xCE	; 206
     530:	c4 f4       	brge	.+48     	; 0x562 <__stack+0x63>
     532:	8e e2       	ldi	r24, 0x2E	; 46
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	0e 94 02 07 	call	0xe04	; 0xe04 <puts>
     53a:	83 e0       	ldi	r24, 0x03	; 3
     53c:	08 95       	ret
     53e:	28 17       	cp	r18, r24
     540:	90 f4       	brcc	.+36     	; 0x566 <__stack+0x67>
     542:	33 33       	cpi	r19, 0x33	; 51
     544:	34 f0       	brlt	.+12     	; 0x552 <__stack+0x53>
     546:	84 e3       	ldi	r24, 0x34	; 52
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	0e 94 02 07 	call	0xe04	; 0xe04 <puts>
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	08 95       	ret
     552:	3e 3c       	cpi	r19, 0xCE	; 206
     554:	54 f4       	brge	.+20     	; 0x56a <__stack+0x6b>
     556:	88 e3       	ldi	r24, 0x38	; 56
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	0e 94 02 07 	call	0xe04	; 0xe04 <puts>
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	08 95       	ret
     562:	84 e0       	ldi	r24, 0x04	; 4
     564:	08 95       	ret
     566:	84 e0       	ldi	r24, 0x04	; 4
     568:	08 95       	ret
     56a:	84 e0       	ldi	r24, 0x04	; 4
     56c:	08 95       	ret

0000056e <pos_calibrate>:
		//printf("\nNEUTRAL\n");
		return NEUTRAL;
	}
}

void pos_calibrate(JoyStick *Stick){
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	ec 01       	movw	r28, r24
	xmem_write(1, XMEM_ADC);
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	74 e1       	ldi	r23, 0x14	; 20
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 44 06 	call	0xc88	; 0xc88 <xmem_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     57e:	85 e0       	ldi	r24, 0x05	; 5
     580:	8a 95       	dec	r24
     582:	f1 f7       	brne	.-4      	; 0x580 <pos_calibrate+0x12>
	_delay_us(15);
	Stick->x_neutralPoint = xmem_read(XMEM_ADC);
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	94 e1       	ldi	r25, 0x14	; 20
     588:	0e 94 48 06 	call	0xc90	; 0xc90 <xmem_read>
     58c:	8c 83       	std	Y+4, r24	; 0x04
	Stick->y_neutralPoint = xmem_read(XMEM_ADC);
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	94 e1       	ldi	r25, 0x14	; 20
     592:	0e 94 48 06 	call	0xc90	; 0xc90 <xmem_read>
     596:	8d 83       	std	Y+5, r24	; 0x05
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <joyStickClick>:

uint8_t joyStickClick(){
	if ((PIND & (1 << PD4)) == 0) {
     59e:	84 99       	sbic	0x10, 4	; 16
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <joyStickClick+0x8>
		//printf("THE BUTTON IS PRESSED");
		return 1;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	08 95       	ret
	}
	return 0;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	08 95       	ret

000005aa <menu_init>:
};



void menu_init(){
	OLED_reset();
     5aa:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
	OLED_home();
     5ae:	0e 94 ff 04 	call	0x9fe	; 0x9fe <OLED_home>
	//menu_instance.CURRENT_PAGE = 0;
	OLED_invert(MAIN_MENU.CURRENT_PAGE, main_menu_map[MAIN_MENU.CURRENT_PAGE]);
     5b2:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <MAIN_MENU>
     5b6:	e8 2f       	mov	r30, r24
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	ee 0f       	add	r30, r30
     5bc:	ff 1f       	adc	r31, r31
     5be:	e2 5e       	subi	r30, 0xE2	; 226
     5c0:	fe 4f       	sbci	r31, 0xFE	; 254
     5c2:	60 81       	ld	r22, Z
     5c4:	71 81       	ldd	r23, Z+1	; 0x01
     5c6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <OLED_invert>
	pos_calibrate(&JOYSTICK);
     5ca:	86 e0       	ldi	r24, 0x06	; 6
     5cc:	93 e0       	ldi	r25, 0x03	; 3
     5ce:	0e 94 b7 02 	call	0x56e	; 0x56e <pos_calibrate>
     5d2:	08 95       	ret

000005d4 <update_parameters>:
}

void update_parameters(MENU *menu_instance){
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	ec 01       	movw	r28, r24
	
	adc_read(&JOYSTICK, &SLIDER);
     5da:	64 e1       	ldi	r22, 0x14	; 20
     5dc:	73 e0       	ldi	r23, 0x03	; 3
     5de:	86 e0       	ldi	r24, 0x06	; 6
     5e0:	93 e0       	ldi	r25, 0x03	; 3
     5e2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <adc_read>
	joyStickPos(&JOYSTICK);
     5e6:	86 e0       	ldi	r24, 0x06	; 6
     5e8:	93 e0       	ldi	r25, 0x03	; 3
     5ea:	0e 94 12 02 	call	0x424	; 0x424 <joyStickPos>
	JOYSTICK_DIR = joyStickDir(&JOYSTICK);
     5ee:	86 e0       	ldi	r24, 0x06	; 6
     5f0:	93 e0       	ldi	r25, 0x03	; 3
     5f2:	0e 94 77 02 	call	0x4ee	; 0x4ee <joyStickDir>
     5f6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <JOYSTICK_DIR>
	
	if(JOYSTICK_DIR != NEUTRAL){
     5fa:	84 30       	cpi	r24, 0x04	; 4
     5fc:	69 f1       	breq	.+90     	; 0x658 <update_parameters+0x84>
		if(JOYSTICK_DIR == DOWN){
     5fe:	81 30       	cpi	r24, 0x01	; 1
     600:	61 f4       	brne	.+24     	; 0x61a <update_parameters+0x46>
			if(menu_instance->CURRENT_PAGE == 3){
     602:	88 81       	ld	r24, Y
     604:	83 30       	cpi	r24, 0x03	; 3
     606:	21 f4       	brne	.+8      	; 0x610 <update_parameters+0x3c>
				menu_instance->CURRENT_PAGE = 0;
     608:	18 82       	st	Y, r1
				menu_instance->MENU_CHANGE = 1;
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	24 c0       	rjmp	.+72     	; 0x658 <update_parameters+0x84>
			}
			else{
				menu_instance->CURRENT_PAGE++;
     610:	8f 5f       	subi	r24, 0xFF	; 255
     612:	88 83       	st	Y, r24
				menu_instance->MENU_CHANGE = 1;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	89 83       	std	Y+1, r24	; 0x01
     618:	1f c0       	rjmp	.+62     	; 0x658 <update_parameters+0x84>
			}
			
		}else if(JOYSTICK_DIR == UP){
     61a:	81 11       	cpse	r24, r1
     61c:	1d c0       	rjmp	.+58     	; 0x658 <update_parameters+0x84>
			if(menu_instance->CURRENT_PAGE == 0){
     61e:	88 81       	ld	r24, Y
     620:	81 11       	cpse	r24, r1
     622:	05 c0       	rjmp	.+10     	; 0x62e <update_parameters+0x5a>
				menu_instance->CURRENT_PAGE = 3;
     624:	83 e0       	ldi	r24, 0x03	; 3
     626:	88 83       	st	Y, r24
				menu_instance->MENU_CHANGE = 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	89 83       	std	Y+1, r24	; 0x01
     62c:	15 c0       	rjmp	.+42     	; 0x658 <update_parameters+0x84>
			}
			else{
				menu_instance->CURRENT_PAGE--;
     62e:	81 50       	subi	r24, 0x01	; 1
     630:	88 83       	st	Y, r24
				menu_instance->MENU_CHANGE = 1;
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	89 83       	std	Y+1, r24	; 0x01
     636:	10 c0       	rjmp	.+32     	; 0x658 <update_parameters+0x84>
			}
		}
	}
	
	while (JOYSTICK_DIR != NEUTRAL){
		adc_read(&JOYSTICK, &SLIDER);
     638:	64 e1       	ldi	r22, 0x14	; 20
     63a:	73 e0       	ldi	r23, 0x03	; 3
     63c:	86 e0       	ldi	r24, 0x06	; 6
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <adc_read>
		joyStickPos(&JOYSTICK);
     644:	86 e0       	ldi	r24, 0x06	; 6
     646:	93 e0       	ldi	r25, 0x03	; 3
     648:	0e 94 12 02 	call	0x424	; 0x424 <joyStickPos>
		JOYSTICK_DIR = joyStickDir(&JOYSTICK);
     64c:	86 e0       	ldi	r24, 0x06	; 6
     64e:	93 e0       	ldi	r25, 0x03	; 3
     650:	0e 94 77 02 	call	0x4ee	; 0x4ee <joyStickDir>
     654:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <JOYSTICK_DIR>
				menu_instance->MENU_CHANGE = 1;
			}
		}
	}
	
	while (JOYSTICK_DIR != NEUTRAL){
     658:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <JOYSTICK_DIR>
     65c:	84 30       	cpi	r24, 0x04	; 4
     65e:	61 f7       	brne	.-40     	; 0x638 <update_parameters+0x64>
		adc_read(&JOYSTICK, &SLIDER);
		joyStickPos(&JOYSTICK);
		JOYSTICK_DIR = joyStickDir(&JOYSTICK);
	}
	
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <game_menu>:
			MAIN_MENU.MENU_CHANGE = 0;
		}	
	}
}

void game_menu(){
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
	GAME_MENU.CURRENT_PAGE = 0;
     66a:	c2 e1       	ldi	r28, 0x12	; 18
     66c:	d3 e0       	ldi	r29, 0x03	; 3
     66e:	18 82       	st	Y, r1
	OLED_reset();
     670:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
	OLED_gamescreen();
     674:	0e 94 22 05 	call	0xa44	; 0xa44 <OLED_gamescreen>
	OLED_invert(GAME_MENU.CURRENT_PAGE, game_menu_map[0]);
     678:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <game_menu_map>
     67c:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <game_menu_map+0x1>
     680:	88 81       	ld	r24, Y
     682:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <OLED_invert>
	
	while(1){
		if(joyStickClick()){
     686:	0e 94 cf 02 	call	0x59e	; 0x59e <joyStickClick>
     68a:	88 23       	and	r24, r24
     68c:	59 f0       	breq	.+22     	; 0x6a4 <game_menu+0x3e>
			while(joyStickClick()){}
     68e:	0e 94 cf 02 	call	0x59e	; 0x59e <joyStickClick>
     692:	81 11       	cpse	r24, r1
     694:	fc cf       	rjmp	.-8      	; 0x68e <game_menu+0x28>
			//NAVIGATE TO SELCETED SUBMENU
			switch(GAME_MENU.CURRENT_PAGE){
     696:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <GAME_MENU>
     69a:	83 30       	cpi	r24, 0x03	; 3
     69c:	19 f4       	brne	.+6      	; 0x6a4 <game_menu+0x3e>
				
				case 2: //DO SOMETHING
					break;
				
				case 3: //RETURN TO MAINMENU
					menu_init();
     69e:	0e 94 d5 02 	call	0x5aa	; 0x5aa <menu_init>
					return;
     6a2:	1b c0       	rjmp	.+54     	; 0x6da <game_menu+0x74>
			}
		}
		
		update_parameters(&GAME_MENU);
     6a4:	82 e1       	ldi	r24, 0x12	; 18
     6a6:	93 e0       	ldi	r25, 0x03	; 3
     6a8:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <update_parameters>
		if(GAME_MENU.MENU_CHANGE){
     6ac:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <GAME_MENU+0x1>
     6b0:	88 23       	and	r24, r24
     6b2:	49 f3       	breq	.-46     	; 0x686 <game_menu+0x20>
			OLED_reset();
     6b4:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
			OLED_gamescreen();
     6b8:	0e 94 22 05 	call	0xa44	; 0xa44 <OLED_gamescreen>
			OLED_invert(GAME_MENU.CURRENT_PAGE, game_menu_map[GAME_MENU.CURRENT_PAGE]);
     6bc:	c2 e1       	ldi	r28, 0x12	; 18
     6be:	d3 e0       	ldi	r29, 0x03	; 3
     6c0:	88 81       	ld	r24, Y
     6c2:	e8 2f       	mov	r30, r24
     6c4:	f0 e0       	ldi	r31, 0x00	; 0
     6c6:	ee 0f       	add	r30, r30
     6c8:	ff 1f       	adc	r31, r31
     6ca:	ea 5e       	subi	r30, 0xEA	; 234
     6cc:	fe 4f       	sbci	r31, 0xFE	; 254
     6ce:	60 81       	ld	r22, Z
     6d0:	71 81       	ldd	r23, Z+1	; 0x01
     6d2:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <OLED_invert>
			GAME_MENU.MENU_CHANGE = 0;
     6d6:	19 82       	std	Y+1, r1	; 0x01
     6d8:	d6 cf       	rjmp	.-84     	; 0x686 <game_menu+0x20>
		}
	}
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <settings_menu>:

void settings_menu(){
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
	SETTINGS_MENU.CURRENT_PAGE = 0;
     6e4:	cc e0       	ldi	r28, 0x0C	; 12
     6e6:	d3 e0       	ldi	r29, 0x03	; 3
     6e8:	18 82       	st	Y, r1
	OLED_reset();
     6ea:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
	OLED_settingscreen();
     6ee:	0e 94 45 05 	call	0xa8a	; 0xa8a <OLED_settingscreen>
	OLED_invert(SETTINGS_MENU.CURRENT_PAGE, settings_menu_map[0]);
     6f2:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <settings_menu_map>
     6f6:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <settings_menu_map+0x1>
     6fa:	88 81       	ld	r24, Y
     6fc:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <OLED_invert>
	
	while(1){
		if(joyStickClick()){
     700:	0e 94 cf 02 	call	0x59e	; 0x59e <joyStickClick>
     704:	88 23       	and	r24, r24
     706:	59 f0       	breq	.+22     	; 0x71e <settings_menu+0x3e>
			while(joyStickClick()){}
     708:	0e 94 cf 02 	call	0x59e	; 0x59e <joyStickClick>
     70c:	81 11       	cpse	r24, r1
     70e:	fc cf       	rjmp	.-8      	; 0x708 <settings_menu+0x28>
			//NAVIGATE TO SELCETED SUBMENU
			switch(SETTINGS_MENU.CURRENT_PAGE){
     710:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <SETTINGS_MENU>
     714:	83 30       	cpi	r24, 0x03	; 3
     716:	19 f4       	brne	.+6      	; 0x71e <settings_menu+0x3e>
				
				case 2: //DO SOMETHING
					break;
				
				case 3: //RETURN TO MAINMENU
					menu_init();
     718:	0e 94 d5 02 	call	0x5aa	; 0x5aa <menu_init>
					return;
     71c:	1b c0       	rjmp	.+54     	; 0x754 <settings_menu+0x74>
			}
		}
		
		update_parameters(&SETTINGS_MENU);
     71e:	8c e0       	ldi	r24, 0x0C	; 12
     720:	93 e0       	ldi	r25, 0x03	; 3
     722:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <update_parameters>
		if(SETTINGS_MENU.MENU_CHANGE){
     726:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <SETTINGS_MENU+0x1>
     72a:	88 23       	and	r24, r24
     72c:	49 f3       	breq	.-46     	; 0x700 <settings_menu+0x20>
			OLED_reset();
     72e:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
			OLED_settingscreen();
     732:	0e 94 45 05 	call	0xa8a	; 0xa8a <OLED_settingscreen>
			OLED_invert(SETTINGS_MENU.CURRENT_PAGE, settings_menu_map[SETTINGS_MENU.CURRENT_PAGE]);
     736:	cc e0       	ldi	r28, 0x0C	; 12
     738:	d3 e0       	ldi	r29, 0x03	; 3
     73a:	88 81       	ld	r24, Y
     73c:	e8 2f       	mov	r30, r24
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	e2 5f       	subi	r30, 0xF2	; 242
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	60 81       	ld	r22, Z
     74a:	71 81       	ldd	r23, Z+1	; 0x01
     74c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <OLED_invert>
			SETTINGS_MENU.MENU_CHANGE = 0;
     750:	19 82       	std	Y+1, r1	; 0x01
     752:	d6 cf       	rjmp	.-84     	; 0x700 <settings_menu+0x20>
		}
	}
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <highscore_menu>:

void highscore_menu(){
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
	HIGHSCORE_MENU.CURRENT_PAGE = 0;
     75e:	c0 e1       	ldi	r28, 0x10	; 16
     760:	d3 e0       	ldi	r29, 0x03	; 3
     762:	18 82       	st	Y, r1
	OLED_reset();
     764:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
	OLED_highscorescreen();
     768:	0e 94 68 05 	call	0xad0	; 0xad0 <OLED_highscorescreen>
	OLED_invert(HIGHSCORE_MENU.CURRENT_PAGE, highscore_menu_map[0]);
     76c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <highscore_menu_map>
     770:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <highscore_menu_map+0x1>
     774:	88 81       	ld	r24, Y
     776:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <OLED_invert>
	
	while(1){
		if(joyStickClick()){
     77a:	0e 94 cf 02 	call	0x59e	; 0x59e <joyStickClick>
     77e:	88 23       	and	r24, r24
     780:	59 f0       	breq	.+22     	; 0x798 <highscore_menu+0x3e>
			while(joyStickClick()){}
     782:	0e 94 cf 02 	call	0x59e	; 0x59e <joyStickClick>
     786:	81 11       	cpse	r24, r1
     788:	fc cf       	rjmp	.-8      	; 0x782 <highscore_menu+0x28>
			//NAVIGATE TO SELCETED SUBMENU
			switch(HIGHSCORE_MENU.CURRENT_PAGE){
     78a:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <HIGHSCORE_MENU>
     78e:	83 30       	cpi	r24, 0x03	; 3
     790:	19 f4       	brne	.+6      	; 0x798 <highscore_menu+0x3e>
				
				case 2: //DO SOMETHING
					break;
				
				case 3: //RETURN TO MAINMENU
					menu_init();
     792:	0e 94 d5 02 	call	0x5aa	; 0x5aa <menu_init>
					return;
     796:	1b c0       	rjmp	.+54     	; 0x7ce <highscore_menu+0x74>
			}
		}
		
		update_parameters(&HIGHSCORE_MENU);
     798:	80 e1       	ldi	r24, 0x10	; 16
     79a:	93 e0       	ldi	r25, 0x03	; 3
     79c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <update_parameters>
		if(HIGHSCORE_MENU.MENU_CHANGE){
     7a0:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <HIGHSCORE_MENU+0x1>
     7a4:	88 23       	and	r24, r24
     7a6:	49 f3       	breq	.-46     	; 0x77a <highscore_menu+0x20>
			OLED_reset();
     7a8:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
			OLED_highscorescreen();
     7ac:	0e 94 68 05 	call	0xad0	; 0xad0 <OLED_highscorescreen>
			OLED_invert(HIGHSCORE_MENU.CURRENT_PAGE, highscore_menu_map[HIGHSCORE_MENU.CURRENT_PAGE]);
     7b0:	c0 e1       	ldi	r28, 0x10	; 16
     7b2:	d3 e0       	ldi	r29, 0x03	; 3
     7b4:	88 81       	ld	r24, Y
     7b6:	e8 2f       	mov	r30, r24
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	ee 0f       	add	r30, r30
     7bc:	ff 1f       	adc	r31, r31
     7be:	ea 5f       	subi	r30, 0xFA	; 250
     7c0:	fe 4f       	sbci	r31, 0xFE	; 254
     7c2:	60 81       	ld	r22, Z
     7c4:	71 81       	ldd	r23, Z+1	; 0x01
     7c6:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <OLED_invert>
			HIGHSCORE_MENU.MENU_CHANGE = 0;
     7ca:	19 82       	std	Y+1, r1	; 0x01
     7cc:	d6 cf       	rjmp	.-84     	; 0x77a <highscore_menu+0x20>
		}
	}
}
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <menu>:
	}
	
}

void menu(){
	menu_init();
     7d4:	0e 94 d5 02 	call	0x5aa	; 0x5aa <menu_init>
		
	while(1){
		if(joyStickClick()){
     7d8:	0e 94 cf 02 	call	0x59e	; 0x59e <joyStickClick>
     7dc:	88 23       	and	r24, r24
     7de:	d9 f0       	breq	.+54     	; 0x816 <menu+0x42>
			while(joyStickClick()){}
     7e0:	0e 94 cf 02 	call	0x59e	; 0x59e <joyStickClick>
     7e4:	81 11       	cpse	r24, r1
     7e6:	fc cf       	rjmp	.-8      	; 0x7e0 <menu+0xc>
			//NAVIGATE TO SELCETED SUBMENU
			switch(MAIN_MENU.CURRENT_PAGE){
     7e8:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <MAIN_MENU>
     7ec:	81 30       	cpi	r24, 0x01	; 1
     7ee:	49 f0       	breq	.+18     	; 0x802 <menu+0x2e>
     7f0:	28 f0       	brcs	.+10     	; 0x7fc <menu+0x28>
     7f2:	82 30       	cpi	r24, 0x02	; 2
     7f4:	49 f0       	breq	.+18     	; 0x808 <menu+0x34>
     7f6:	83 30       	cpi	r24, 0x03	; 3
     7f8:	51 f0       	breq	.+20     	; 0x80e <menu+0x3a>
     7fa:	0d c0       	rjmp	.+26     	; 0x816 <menu+0x42>
				case 0: //ENTER GAME SUBMENU
					game_menu();
     7fc:	0e 94 33 03 	call	0x666	; 0x666 <game_menu>
					break;	
     800:	0a c0       	rjmp	.+20     	; 0x816 <menu+0x42>
				case 1: //ENTER HIGHSCORE SUBMENU
					highscore_menu();
     802:	0e 94 ad 03 	call	0x75a	; 0x75a <highscore_menu>
					break;	
     806:	07 c0       	rjmp	.+14     	; 0x816 <menu+0x42>
				case 2: //ENTER SETTINGS
					settings_menu();
     808:	0e 94 70 03 	call	0x6e0	; 0x6e0 <settings_menu>
					break;	
     80c:	04 c0       	rjmp	.+8      	; 0x816 <menu+0x42>
				case 3: //PLAY CREDTIS
					OLED_credits();
     80e:	0e 94 8b 05 	call	0xb16	; 0xb16 <OLED_credits>
					menu_init();
     812:	0e 94 d5 02 	call	0x5aa	; 0x5aa <menu_init>
					break;	
			
			}
			
		}
		update_parameters(&MAIN_MENU);
     816:	8e e0       	ldi	r24, 0x0E	; 14
     818:	93 e0       	ldi	r25, 0x03	; 3
     81a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <update_parameters>
		if(MAIN_MENU.MENU_CHANGE){
     81e:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <MAIN_MENU+0x1>
     822:	88 23       	and	r24, r24
     824:	c9 f2       	breq	.-78     	; 0x7d8 <menu+0x4>
			OLED_reset();
     826:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
			OLED_home();
     82a:	0e 94 ff 04 	call	0x9fe	; 0x9fe <OLED_home>
			OLED_invert(MAIN_MENU.CURRENT_PAGE, main_menu_map[MAIN_MENU.CURRENT_PAGE]);	
     82e:	ce e0       	ldi	r28, 0x0E	; 14
     830:	d3 e0       	ldi	r29, 0x03	; 3
     832:	88 81       	ld	r24, Y
     834:	e8 2f       	mov	r30, r24
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	e2 5e       	subi	r30, 0xE2	; 226
     83e:	fe 4f       	sbci	r31, 0xFE	; 254
     840:	60 81       	ld	r22, Z
     842:	71 81       	ldd	r23, Z+1	; 0x01
     844:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <OLED_invert>
			MAIN_MENU.MENU_CHANGE = 0;
     848:	19 82       	std	Y+1, r1	; 0x01
     84a:	c6 cf       	rjmp	.-116    	; 0x7d8 <menu+0x4>

0000084c <OLED_write_cmd>:
	OLED_pos(page, col);
	OLED_write_data(0b00011000);
	OLED_write_data(0b00011000);
	OLED_write_data(0b01111110);
	OLED_write_data(0b00111100);
	OLED_write_data(0b00011000);
     84c:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <__bss_end+0xcde>
     850:	08 95       	ret

00000852 <OLED_write_data>:
     852:	80 93 00 12 	sts	0x1200, r24	; 0x801200 <__bss_end+0xede>
     856:	08 95       	ret

00000858 <OLED_goto_page>:
     858:	88 30       	cpi	r24, 0x08	; 8
     85a:	18 f4       	brcc	.+6      	; 0x862 <OLED_goto_page+0xa>
     85c:	80 55       	subi	r24, 0x50	; 80
     85e:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
     862:	08 95       	ret

00000864 <OLED_goto_col>:
     864:	cf 93       	push	r28
     866:	88 23       	and	r24, r24
     868:	54 f0       	brlt	.+20     	; 0x87e <OLED_goto_col+0x1a>
     86a:	c8 2f       	mov	r28, r24
     86c:	8f 70       	andi	r24, 0x0F	; 15
     86e:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
     872:	8c 2f       	mov	r24, r28
     874:	82 95       	swap	r24
     876:	8f 70       	andi	r24, 0x0F	; 15
     878:	80 5f       	subi	r24, 0xF0	; 240
     87a:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
     87e:	cf 91       	pop	r28
     880:	08 95       	ret

00000882 <OLED_pos>:
     882:	cf 93       	push	r28
     884:	c6 2f       	mov	r28, r22
     886:	0e 94 2c 04 	call	0x858	; 0x858 <OLED_goto_page>
     88a:	8c 2f       	mov	r24, r28
     88c:	0e 94 32 04 	call	0x864	; 0x864 <OLED_goto_col>
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <OLED_print>:
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	fc 01       	movw	r30, r24
     89e:	90 81       	ld	r25, Z
     8a0:	90 52       	subi	r25, 0x20	; 32
     8a2:	9f 35       	cpi	r25, 0x5F	; 95
     8a4:	a0 f0       	brcs	.+40     	; 0x8ce <OLED_print+0x3a>
     8a6:	19 c0       	rjmp	.+50     	; 0x8da <OLED_print+0x46>
     8a8:	d8 01       	movw	r26, r16
     8aa:	ec 91       	ld	r30, X
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	b0 97       	sbiw	r30, 0x20	; 32
     8b0:	ee 0f       	add	r30, r30
     8b2:	ff 1f       	adc	r31, r31
     8b4:	ee 0f       	add	r30, r30
     8b6:	ff 1f       	adc	r31, r31
     8b8:	ee 0f       	add	r30, r30
     8ba:	ff 1f       	adc	r31, r31
     8bc:	ec 0f       	add	r30, r28
     8be:	fd 1f       	adc	r31, r29
     8c0:	e0 59       	subi	r30, 0x90	; 144
     8c2:	ff 4f       	sbci	r31, 0xFF	; 255
     8c4:	84 91       	lpm	r24, Z
     8c6:	0e 94 29 04 	call	0x852	; 0x852 <OLED_write_data>
     8ca:	21 96       	adiw	r28, 0x01	; 1
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <OLED_print+0x40>
     8ce:	8f 01       	movw	r16, r30
     8d0:	c0 e0       	ldi	r28, 0x00	; 0
     8d2:	d0 e0       	ldi	r29, 0x00	; 0
     8d4:	c8 30       	cpi	r28, 0x08	; 8
     8d6:	d1 05       	cpc	r29, r1
     8d8:	3c f3       	brlt	.-50     	; 0x8a8 <OLED_print+0x14>
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	08 95       	ret

000008e4 <OLED_print_string>:
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	8c 01       	movw	r16, r24
     8ee:	c0 e0       	ldi	r28, 0x00	; 0
     8f0:	d0 e0       	ldi	r29, 0x00	; 0
     8f2:	06 c0       	rjmp	.+12     	; 0x900 <OLED_print_string+0x1c>
     8f4:	c8 01       	movw	r24, r16
     8f6:	8c 0f       	add	r24, r28
     8f8:	9d 1f       	adc	r25, r29
     8fa:	0e 94 4a 04 	call	0x894	; 0x894 <OLED_print>
     8fe:	21 96       	adiw	r28, 0x01	; 1
     900:	f8 01       	movw	r30, r16
     902:	01 90       	ld	r0, Z+
     904:	00 20       	and	r0, r0
     906:	e9 f7       	brne	.-6      	; 0x902 <OLED_print_string+0x1e>
     908:	31 97       	sbiw	r30, 0x01	; 1
     90a:	e0 1b       	sub	r30, r16
     90c:	f1 0b       	sbc	r31, r17
     90e:	ce 17       	cp	r28, r30
     910:	df 07       	cpc	r29, r31
     912:	80 f3       	brcs	.-32     	; 0x8f4 <OLED_print_string+0x10>
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	08 95       	ret

0000091e <OLED_clear_page>:
}

void OLED_clear_page(uint8_t page){
     91e:	cf 93       	push	r28
	OLED_goto_page(page);
     920:	0e 94 2c 04 	call	0x858	; 0x858 <OLED_goto_page>
	for (uint8_t col = 0; col < 128; col++){
     924:	c0 e0       	ldi	r28, 0x00	; 0
     926:	04 c0       	rjmp	.+8      	; 0x930 <OLED_clear_page+0x12>
		OLED_write_data(0x00);
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	0e 94 29 04 	call	0x852	; 0x852 <OLED_write_data>
	OLED_write_data(0b00011000);
}

void OLED_clear_page(uint8_t page){
	OLED_goto_page(page);
	for (uint8_t col = 0; col < 128; col++){
     92e:	cf 5f       	subi	r28, 0xFF	; 255
     930:	cc 23       	and	r28, r28
     932:	d4 f7       	brge	.-12     	; 0x928 <OLED_clear_page+0xa>
		OLED_write_data(0x00);
	}	
}
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <OLED_reset>:
		OLED_write_cmd(0x81);
		OLED_write_cmd(level);
	}	
}

void OLED_reset(){
     938:	cf 93       	push	r28
	for(uint8_t page = 0; page < 8; page++){
     93a:	c0 e0       	ldi	r28, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <OLED_reset+0xe>
		OLED_clear_page(page);
     93e:	8c 2f       	mov	r24, r28
     940:	0e 94 8f 04 	call	0x91e	; 0x91e <OLED_clear_page>
		OLED_write_cmd(level);
	}	
}

void OLED_reset(){
	for(uint8_t page = 0; page < 8; page++){
     944:	cf 5f       	subi	r28, 0xFF	; 255
     946:	c8 30       	cpi	r28, 0x08	; 8
     948:	d0 f3       	brcs	.-12     	; 0x93e <OLED_reset+0x6>
		OLED_clear_page(page);
	}
}
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret

0000094e <OLED_init>:
	}
}


void OLED_init(){
	OLED_write_cmd(0xae); // display off
     94e:	8e ea       	ldi	r24, 0xAE	; 174
     950:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0xa1); //segment remap
     954:	81 ea       	ldi	r24, 0xA1	; 161
     956:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0xda); //common pads hardware: alternative
     95a:	8a ed       	ldi	r24, 0xDA	; 218
     95c:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0x12);
     960:	82 e1       	ldi	r24, 0x12	; 18
     962:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0xc8); //common output scan direction:com63~com0
     966:	88 ec       	ldi	r24, 0xC8	; 200
     968:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0xa8); //multiplex ration mode:63
     96c:	88 ea       	ldi	r24, 0xA8	; 168
     96e:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0x3f);
     972:	8f e3       	ldi	r24, 0x3F	; 63
     974:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0xd5); //display divide ratio/osc. freq. mode
     978:	85 ed       	ldi	r24, 0xD5	; 213
     97a:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0x80);
     97e:	80 e8       	ldi	r24, 0x80	; 128
     980:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0x81); //contrast control
     984:	81 e8       	ldi	r24, 0x81	; 129
     986:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0x50);
     98a:	80 e5       	ldi	r24, 0x50	; 80
     98c:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0xd9); //set pre-charge period
     990:	89 ed       	ldi	r24, 0xD9	; 217
     992:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0x21);
     996:	81 e2       	ldi	r24, 0x21	; 33
     998:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0x20); //Set Memory Addressing Mode
     99c:	80 e2       	ldi	r24, 0x20	; 32
     99e:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0x02);
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0xdb); //VCOM deselect level mode
     9a8:	8b ed       	ldi	r24, 0xDB	; 219
     9aa:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0x30);
     9ae:	80 e3       	ldi	r24, 0x30	; 48
     9b0:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0xad); //master configuration
     9b4:	8d ea       	ldi	r24, 0xAD	; 173
     9b6:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0x00);
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0xa4); //out follows RAM content
     9c0:	84 ea       	ldi	r24, 0xA4	; 164
     9c2:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0xa6); //set normal display
     9c6:	86 ea       	ldi	r24, 0xA6	; 166
     9c8:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_write_cmd(0xaf); // display on
     9cc:	8f ea       	ldi	r24, 0xAF	; 175
     9ce:	0e 94 26 04 	call	0x84c	; 0x84c <OLED_write_cmd>
	OLED_reset(); //Turns all pixels off
     9d2:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
	OLED_pos(3,35);
     9d6:	63 e2       	ldi	r22, 0x23	; 35
     9d8:	83 e0       	ldi	r24, 0x03	; 3
     9da:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("WELCOME"); //Prints welcome message on the screen
     9de:	89 e8       	ldi	r24, 0x89	; 137
     9e0:	92 e0       	ldi	r25, 0x02	; 2
     9e2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9e6:	2f ef       	ldi	r18, 0xFF	; 255
     9e8:	8f ef       	ldi	r24, 0xFF	; 255
     9ea:	9d e1       	ldi	r25, 0x1D	; 29
     9ec:	21 50       	subi	r18, 0x01	; 1
     9ee:	80 40       	sbci	r24, 0x00	; 0
     9f0:	90 40       	sbci	r25, 0x00	; 0
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <OLED_init+0x9e>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <OLED_init+0xa8>
     9f6:	00 00       	nop
	_delay_ms(2000);
	OLED_reset();
     9f8:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
     9fc:	08 95       	ret

000009fe <OLED_home>:
		OLED_write_data(0x00);
	}	
}

void OLED_home(){
	OLED_reset();
     9fe:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
	OLED_pos(0,PADDING);
     a02:	68 e0       	ldi	r22, 0x08	; 8
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("PLAY GAME");	
     a0a:	8e e6       	ldi	r24, 0x6E	; 110
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
	
	OLED_pos(1,PADDING);
     a12:	68 e0       	ldi	r22, 0x08	; 8
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("HIGHSCORE");	
     a1a:	8c e1       	ldi	r24, 0x1C	; 28
     a1c:	92 e0       	ldi	r25, 0x02	; 2
     a1e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
	
	OLED_pos(2,PADDING);
     a22:	68 e0       	ldi	r22, 0x08	; 8
     a24:	82 e0       	ldi	r24, 0x02	; 2
     a26:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("SETTINGS");	
     a2a:	88 e7       	ldi	r24, 0x78	; 120
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
		
	OLED_pos(3,PADDING);
     a32:	68 e0       	ldi	r22, 0x08	; 8
     a34:	83 e0       	ldi	r24, 0x03	; 3
     a36:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("CREDITS");
     a3a:	81 e8       	ldi	r24, 0x81	; 129
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
     a42:	08 95       	ret

00000a44 <OLED_gamescreen>:
}

void OLED_gamescreen(){
	OLED_reset();
     a44:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
	OLED_pos(0,PADDING);
     a48:	68 e0       	ldi	r22, 0x08	; 8
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("NEW GAME");
     a50:	85 e6       	ldi	r24, 0x65	; 101
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
	
	OLED_pos(1,PADDING);
     a58:	68 e0       	ldi	r22, 0x08	; 8
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("PLACEHOLDER");
     a60:	86 e3       	ldi	r24, 0x36	; 54
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
	
	OLED_pos(2,PADDING);
     a68:	68 e0       	ldi	r22, 0x08	; 8
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("PLACEHOLDER");
     a70:	86 e3       	ldi	r24, 0x36	; 54
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
	
	OLED_pos(3,PADDING);
     a78:	68 e0       	ldi	r22, 0x08	; 8
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("EXIT");
     a80:	82 e4       	ldi	r24, 0x42	; 66
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
     a88:	08 95       	ret

00000a8a <OLED_settingscreen>:
}

void OLED_settingscreen(){
	OLED_reset();
     a8a:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
	OLED_pos(0,PADDING);
     a8e:	68 e0       	ldi	r22, 0x08	; 8
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("SET BRIGHTNESS");
     a96:	87 e4       	ldi	r24, 0x47	; 71
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
	
	OLED_pos(1,PADDING);
     a9e:	68 e0       	ldi	r22, 0x08	; 8
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("SET DIFFICULTY");
     aa6:	86 e5       	ldi	r24, 0x56	; 86
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
	
	OLED_pos(2,PADDING);
     aae:	68 e0       	ldi	r22, 0x08	; 8
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("PLACEHOLDER");
     ab6:	86 e3       	ldi	r24, 0x36	; 54
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
	
	OLED_pos(3,PADDING);
     abe:	68 e0       	ldi	r22, 0x08	; 8
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("EXIT");
     ac6:	82 e4       	ldi	r24, 0x42	; 66
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
     ace:	08 95       	ret

00000ad0 <OLED_highscorescreen>:
}

void OLED_highscorescreen(){
	OLED_reset();
     ad0:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
	OLED_pos(0,PADDING);
     ad4:	68 e0       	ldi	r22, 0x08	; 8
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("SEE HIGHSCORES");
     adc:	81 e9       	ldi	r24, 0x91	; 145
     ade:	92 e0       	ldi	r25, 0x02	; 2
     ae0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
	
	OLED_pos(1,PADDING);
     ae4:	68 e0       	ldi	r22, 0x08	; 8
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("RESET HIGHSCORE");
     aec:	86 e2       	ldi	r24, 0x26	; 38
     aee:	92 e0       	ldi	r25, 0x02	; 2
     af0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
	
	OLED_pos(2,PADDING);
     af4:	68 e0       	ldi	r22, 0x08	; 8
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("PLACEHOLDER");
     afc:	86 e3       	ldi	r24, 0x36	; 54
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
	
	OLED_pos(3,PADDING);
     b04:	68 e0       	ldi	r22, 0x08	; 8
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("EXIT");
     b0c:	82 e4       	ldi	r24, 0x42	; 66
     b0e:	92 e0       	ldi	r25, 0x02	; 2
     b10:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
     b14:	08 95       	ret

00000b16 <OLED_credits>:
}

void OLED_credits(){
	OLED_reset();
     b16:	0e 94 9c 04 	call	0x938	; 0x938 <OLED_reset>
	OLED_pos(0, PADDING);
     b1a:	68 e0       	ldi	r22, 0x08	; 8
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("THANK YOU!");
     b22:	80 ea       	ldi	r24, 0xA0	; 160
     b24:	92 e0       	ldi	r25, 0x02	; 2
     b26:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
     b2a:	2f ef       	ldi	r18, 0xFF	; 255
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	9e e0       	ldi	r25, 0x0E	; 14
     b30:	21 50       	subi	r18, 0x01	; 1
     b32:	80 40       	sbci	r24, 0x00	; 0
     b34:	90 40       	sbci	r25, 0x00	; 0
     b36:	e1 f7       	brne	.-8      	; 0xb30 <OLED_credits+0x1a>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <OLED_credits+0x24>
     b3a:	00 00       	nop
	_delay_ms(1000);
	OLED_pos(1, PADDING);
     b3c:	68 e0       	ldi	r22, 0x08	; 8
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("TORSTEIN");
     b44:	8b ea       	ldi	r24, 0xAB	; 171
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
     b4c:	2f ef       	ldi	r18, 0xFF	; 255
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	9e e0       	ldi	r25, 0x0E	; 14
     b52:	21 50       	subi	r18, 0x01	; 1
     b54:	80 40       	sbci	r24, 0x00	; 0
     b56:	90 40       	sbci	r25, 0x00	; 0
     b58:	e1 f7       	brne	.-8      	; 0xb52 <OLED_credits+0x3c>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <OLED_credits+0x46>
     b5c:	00 00       	nop
	_delay_ms(1000);
	OLED_pos(2, PADDING);
     b5e:	68 e0       	ldi	r22, 0x08	; 8
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("DANIEL");
     b66:	84 eb       	ldi	r24, 0xB4	; 180
     b68:	92 e0       	ldi	r25, 0x02	; 2
     b6a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
     b6e:	2f ef       	ldi	r18, 0xFF	; 255
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	9e e0       	ldi	r25, 0x0E	; 14
     b74:	21 50       	subi	r18, 0x01	; 1
     b76:	80 40       	sbci	r24, 0x00	; 0
     b78:	90 40       	sbci	r25, 0x00	; 0
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <OLED_credits+0x5e>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <OLED_credits+0x68>
     b7e:	00 00       	nop
	_delay_ms(1000);
	OLED_pos(3, PADDING);
     b80:	68 e0       	ldi	r22, 0x08	; 8
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("SIGVE aka");
     b88:	8b eb       	ldi	r24, 0xBB	; 187
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
     b90:	2f ef       	ldi	r18, 0xFF	; 255
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	9c e2       	ldi	r25, 0x2C	; 44
     b96:	21 50       	subi	r18, 0x01	; 1
     b98:	80 40       	sbci	r24, 0x00	; 0
     b9a:	90 40       	sbci	r25, 0x00	; 0
     b9c:	e1 f7       	brne	.-8      	; 0xb96 <OLED_credits+0x80>
     b9e:	00 c0       	rjmp	.+0      	; 0xba0 <OLED_credits+0x8a>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <OLED_credits+0x8c>
	_delay_ms(3000);
	OLED_pos(4, PADDING);
     ba2:	68 e0       	ldi	r22, 0x08	; 8
     ba4:	84 e0       	ldi	r24, 0x04	; 4
     ba6:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	OLED_print_string("MOTO MOTO");
     baa:	85 ec       	ldi	r24, 0xC5	; 197
     bac:	92 e0       	ldi	r25, 0x02	; 2
     bae:	0e 94 72 04 	call	0x8e4	; 0x8e4 <OLED_print_string>
     bb2:	2f ef       	ldi	r18, 0xFF	; 255
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	95 e9       	ldi	r25, 0x95	; 149
     bb8:	21 50       	subi	r18, 0x01	; 1
     bba:	80 40       	sbci	r24, 0x00	; 0
     bbc:	90 40       	sbci	r25, 0x00	; 0
     bbe:	e1 f7       	brne	.-8      	; 0xbb8 <OLED_credits+0xa2>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <OLED_credits+0xac>
     bc2:	00 00       	nop
     bc4:	08 95       	ret

00000bc6 <OLED_invert>:
	
}



void OLED_invert(uint8_t page, const char* str){
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	d8 2f       	mov	r29, r24
     bd8:	8b 01       	movw	r16, r22
	OLED_pos(page, 0);
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	
	for(uint8_t i = 0; i < 128; i++){
     be0:	c0 e0       	ldi	r28, 0x00	; 0
     be2:	04 c0       	rjmp	.+8      	; 0xbec <OLED_invert+0x26>
		OLED_write_data(0xff);
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	0e 94 29 04 	call	0x852	; 0x852 <OLED_write_data>


void OLED_invert(uint8_t page, const char* str){
	OLED_pos(page, 0);
	
	for(uint8_t i = 0; i < 128; i++){
     bea:	cf 5f       	subi	r28, 0xFF	; 255
     bec:	cc 23       	and	r28, r28
     bee:	d4 f7       	brge	.-12     	; 0xbe4 <OLED_invert+0x1e>
		OLED_write_data(0xff);
	}
	OLED_pos(page, PADDING);
     bf0:	68 e0       	ldi	r22, 0x08	; 8
     bf2:	8d 2f       	mov	r24, r29
     bf4:	0e 94 41 04 	call	0x882	; 0x882 <OLED_pos>
	
	for(int i = 0; i < strlen(str); i++){
     bf8:	c1 2c       	mov	r12, r1
     bfa:	d1 2c       	mov	r13, r1
     bfc:	1e c0       	rjmp	.+60     	; 0xc3a <OLED_invert+0x74>
		for(int j = 0; j < FONT_SIZE; j++){
			uint8_t original_data = pgm_read_byte(&(font8[str[i]-32][j]));
     bfe:	f8 01       	movw	r30, r16
     c00:	ee 0d       	add	r30, r14
     c02:	ff 1d       	adc	r31, r15
     c04:	e0 81       	ld	r30, Z
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	b0 97       	sbiw	r30, 0x20	; 32
     c0a:	ee 0f       	add	r30, r30
     c0c:	ff 1f       	adc	r31, r31
     c0e:	ee 0f       	add	r30, r30
     c10:	ff 1f       	adc	r31, r31
     c12:	ee 0f       	add	r30, r30
     c14:	ff 1f       	adc	r31, r31
     c16:	ec 0f       	add	r30, r28
     c18:	fd 1f       	adc	r31, r29
     c1a:	e0 59       	subi	r30, 0x90	; 144
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	84 91       	lpm	r24, Z
			uint8_t inverted_data = ~original_data;
			OLED_write_data(inverted_data);
     c20:	80 95       	com	r24
     c22:	0e 94 29 04 	call	0x852	; 0x852 <OLED_write_data>
		OLED_write_data(0xff);
	}
	OLED_pos(page, PADDING);
	
	for(int i = 0; i < strlen(str); i++){
		for(int j = 0; j < FONT_SIZE; j++){
     c26:	21 96       	adiw	r28, 0x01	; 1
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <OLED_invert+0x68>
     c2a:	c0 e0       	ldi	r28, 0x00	; 0
     c2c:	d0 e0       	ldi	r29, 0x00	; 0
     c2e:	c8 30       	cpi	r28, 0x08	; 8
     c30:	d1 05       	cpc	r29, r1
     c32:	2c f3       	brlt	.-54     	; 0xbfe <OLED_invert+0x38>
	for(uint8_t i = 0; i < 128; i++){
		OLED_write_data(0xff);
	}
	OLED_pos(page, PADDING);
	
	for(int i = 0; i < strlen(str); i++){
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	c8 1a       	sub	r12, r24
     c38:	d8 0a       	sbc	r13, r24
     c3a:	f8 01       	movw	r30, r16
     c3c:	01 90       	ld	r0, Z+
     c3e:	00 20       	and	r0, r0
     c40:	e9 f7       	brne	.-6      	; 0xc3c <OLED_invert+0x76>
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	e0 1b       	sub	r30, r16
     c46:	f1 0b       	sbc	r31, r17
     c48:	76 01       	movw	r14, r12
     c4a:	ce 16       	cp	r12, r30
     c4c:	df 06       	cpc	r13, r31
     c4e:	68 f3       	brcs	.-38     	; 0xc2a <OLED_invert+0x64>
			uint8_t original_data = pgm_read_byte(&(font8[str[i]-32][j]));
			uint8_t inverted_data = ~original_data;
			OLED_write_data(inverted_data);
	}
}
}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	df 90       	pop	r13
     c5e:	cf 90       	pop	r12
     c60:	08 95       	ret

00000c62 <SPI_init>:
#include "SPI.h"
#include <avr/io.h>

void SPI_init(void){
	// Set MOSI and SCK output, all others input 
	DDRB |= (1<<PB5)|(1<<PB7)|(1<<PB4);
     c62:	87 b3       	in	r24, 0x17	; 23
     c64:	80 6b       	ori	r24, 0xB0	; 176
     c66:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB1) & ~(1 << PB2) & ~(1 << PB3) & ~(1 << PB6); //BLODKOK
     c68:	87 b3       	in	r24, 0x17	; 23
     c6a:	81 7b       	andi	r24, 0xB1	; 177
     c6c:	87 bb       	out	0x17, r24	; 23
	// Enable SPI, Master, set clock rate fck/16 
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     c6e:	81 e5       	ldi	r24, 0x51	; 81
     c70:	8d b9       	out	0x0d, r24	; 13
	//SPDR |= ~(1<<CPOL) | ~(1<<CPHA); //Mulig feil
	PORTB |= (1<<PB4);
     c72:	88 b3       	in	r24, 0x18	; 24
     c74:	80 61       	ori	r24, 0x10	; 16
     c76:	88 bb       	out	0x18, r24	; 24
     c78:	08 95       	ret

00000c7a <xmem_init>:

#include "XMEM.h"

void xmem_init(void)
{
	MCUCR |= (1<<SRE);
     c7a:	85 b7       	in	r24, 0x35	; 53
     c7c:	80 68       	ori	r24, 0x80	; 128
     c7e:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
     c80:	80 b7       	in	r24, 0x30	; 48
     c82:	80 62       	ori	r24, 0x20	; 32
     c84:	80 bf       	out	0x30, r24	; 48
     c86:	08 95       	ret

00000c88 <xmem_write>:
}

void xmem_write(int8_t data, uint16_t addr)
{
	volatile char *ext_mem = (char*) XMEM_OLED_CMD;
	ext_mem[addr] = data;	
     c88:	fb 01       	movw	r30, r22
     c8a:	f0 5f       	subi	r31, 0xF0	; 240
     c8c:	80 83       	st	Z, r24
     c8e:	08 95       	ret

00000c90 <xmem_read>:
}

int8_t xmem_read(uint16_t addr)
{
	volatile char *ext_mem = (char*) XMEM_OLED_CMD;
	int8_t ret_value = ext_mem[addr];
     c90:	90 5f       	subi	r25, 0xF0	; 240
     c92:	fc 01       	movw	r30, r24
     c94:	80 81       	ld	r24, Z
	return ret_value;
     c96:	08 95       	ret

00000c98 <hardware_init>:
#include "CAN.h"
#include "MCP2515.h"


void hardware_init(){
	xmem_init();
     c98:	0e 94 3d 06 	call	0xc7a	; 0xc7a <xmem_init>
	
	USART_Init(MYUBRR);
     c9c:	8f e1       	ldi	r24, 0x1F	; 31
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <USART_Init>

	uart_setup_stdio();
     ca4:	0e 94 82 06 	call	0xd04	; 0xd04 <uart_setup_stdio>

	adc_init();
     ca8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
	
	OLED_init();
     cac:	0e 94 a7 04 	call	0x94e	; 0x94e <OLED_init>
	
	SPI_init();
     cb0:	0e 94 31 06 	call	0xc62	; 0xc62 <SPI_init>
	
	printf("-------------------PROGRAM STARTV3-------------------\n");
     cb4:	8f ec       	ldi	r24, 0xCF	; 207
     cb6:	92 e0       	ldi	r25, 0x02	; 2
     cb8:	0e 94 02 07 	call	0xe04	; 0xe04 <puts>
     cbc:	08 95       	ret

00000cbe <main>:
}



int main(void){	
	hardware_init();
     cbe:	0e 94 4c 06 	call	0xc98	; 0xc98 <hardware_init>
     cc2:	2f ef       	ldi	r18, 0xFF	; 255
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
     cc6:	9e e0       	ldi	r25, 0x0E	; 14
     cc8:	21 50       	subi	r18, 0x01	; 1
     cca:	80 40       	sbci	r24, 0x00	; 0
     ccc:	90 40       	sbci	r25, 0x00	; 0
     cce:	e1 f7       	brne	.-8      	; 0xcc8 <main+0xa>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <main+0x14>
     cd2:	00 00       	nop
	
	_delay_ms(1000);

	menu();
     cd4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <menu>
     cd8:	ff cf       	rjmp	.-2      	; 0xcd8 <main+0x1a>

00000cda <uart_putchar>:
// Function for reading a single char via UART
int uart_getchar(FILE *stream) {
	// Wait to a databyte is ready
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
     cda:	cf 93       	push	r28
     cdc:	c8 2f       	mov	r28, r24
     cde:	8a 30       	cpi	r24, 0x0A	; 10
     ce0:	19 f4       	brne	.+6      	; 0xce8 <uart_putchar+0xe>
     ce2:	8d e0       	ldi	r24, 0x0D	; 13
     ce4:	0e 94 6d 06 	call	0xcda	; 0xcda <uart_putchar>
     ce8:	5d 9b       	sbis	0x0b, 5	; 11
     cea:	fe cf       	rjmp	.-4      	; 0xce8 <uart_putchar+0xe>
     cec:	cc b9       	out	0x0c, r28	; 12
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	cf 91       	pop	r28
     cf4:	08 95       	ret

00000cf6 <USART_Init>:
     cf6:	90 bd       	out	0x20, r25	; 32
     cf8:	89 b9       	out	0x09, r24	; 9
     cfa:	88 e1       	ldi	r24, 0x18	; 24
     cfc:	8a b9       	out	0x0a, r24	; 10
     cfe:	8e e8       	ldi	r24, 0x8E	; 142
     d00:	80 bd       	out	0x20, r24	; 32
     d02:	08 95       	ret

00000d04 <uart_setup_stdio>:

// Function to set op printf
void uart_setup_stdio(void) {
	// Redirect stdout to UART with fdevopen
	FILE *uart_stdout = fdevopen(uart_putchar, NULL);
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	8d e6       	ldi	r24, 0x6D	; 109
     d0a:	96 e0       	ldi	r25, 0x06	; 6
     d0c:	0e 94 b7 06 	call	0xd6e	; 0xd6e <fdevopen>
	if (uart_stdout != NULL) {
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	21 f0       	breq	.+8      	; 0xd1c <uart_setup_stdio+0x18>
		stdout = uart_stdout;  // Redirects printf to UART
     d14:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <__iob+0x3>
     d18:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <__iob+0x2>
     d1c:	08 95       	ret

00000d1e <__divmodhi4>:
     d1e:	97 fb       	bst	r25, 7
     d20:	07 2e       	mov	r0, r23
     d22:	16 f4       	brtc	.+4      	; 0xd28 <__divmodhi4+0xa>
     d24:	00 94       	com	r0
     d26:	07 d0       	rcall	.+14     	; 0xd36 <__divmodhi4_neg1>
     d28:	77 fd       	sbrc	r23, 7
     d2a:	09 d0       	rcall	.+18     	; 0xd3e <__divmodhi4_neg2>
     d2c:	0e 94 a3 06 	call	0xd46	; 0xd46 <__udivmodhi4>
     d30:	07 fc       	sbrc	r0, 7
     d32:	05 d0       	rcall	.+10     	; 0xd3e <__divmodhi4_neg2>
     d34:	3e f4       	brtc	.+14     	; 0xd44 <__divmodhi4_exit>

00000d36 <__divmodhi4_neg1>:
     d36:	90 95       	com	r25
     d38:	81 95       	neg	r24
     d3a:	9f 4f       	sbci	r25, 0xFF	; 255
     d3c:	08 95       	ret

00000d3e <__divmodhi4_neg2>:
     d3e:	70 95       	com	r23
     d40:	61 95       	neg	r22
     d42:	7f 4f       	sbci	r23, 0xFF	; 255

00000d44 <__divmodhi4_exit>:
     d44:	08 95       	ret

00000d46 <__udivmodhi4>:
     d46:	aa 1b       	sub	r26, r26
     d48:	bb 1b       	sub	r27, r27
     d4a:	51 e1       	ldi	r21, 0x11	; 17
     d4c:	07 c0       	rjmp	.+14     	; 0xd5c <__udivmodhi4_ep>

00000d4e <__udivmodhi4_loop>:
     d4e:	aa 1f       	adc	r26, r26
     d50:	bb 1f       	adc	r27, r27
     d52:	a6 17       	cp	r26, r22
     d54:	b7 07       	cpc	r27, r23
     d56:	10 f0       	brcs	.+4      	; 0xd5c <__udivmodhi4_ep>
     d58:	a6 1b       	sub	r26, r22
     d5a:	b7 0b       	sbc	r27, r23

00000d5c <__udivmodhi4_ep>:
     d5c:	88 1f       	adc	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	5a 95       	dec	r21
     d62:	a9 f7       	brne	.-22     	; 0xd4e <__udivmodhi4_loop>
     d64:	80 95       	com	r24
     d66:	90 95       	com	r25
     d68:	bc 01       	movw	r22, r24
     d6a:	cd 01       	movw	r24, r26
     d6c:	08 95       	ret

00000d6e <fdevopen>:
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	31 f4       	brne	.+12     	; 0xd86 <fdevopen+0x18>
     d7a:	61 15       	cp	r22, r1
     d7c:	71 05       	cpc	r23, r1
     d7e:	19 f4       	brne	.+6      	; 0xd86 <fdevopen+0x18>
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	3a c0       	rjmp	.+116    	; 0xdfa <fdevopen+0x8c>
     d86:	8b 01       	movw	r16, r22
     d88:	ec 01       	movw	r28, r24
     d8a:	6e e0       	ldi	r22, 0x0E	; 14
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 32 07 	call	0xe64	; 0xe64 <calloc>
     d96:	fc 01       	movw	r30, r24
     d98:	89 2b       	or	r24, r25
     d9a:	91 f3       	breq	.-28     	; 0xd80 <fdevopen+0x12>
     d9c:	80 e8       	ldi	r24, 0x80	; 128
     d9e:	83 83       	std	Z+3, r24	; 0x03
     da0:	01 15       	cp	r16, r1
     da2:	11 05       	cpc	r17, r1
     da4:	71 f0       	breq	.+28     	; 0xdc2 <fdevopen+0x54>
     da6:	13 87       	std	Z+11, r17	; 0x0b
     da8:	02 87       	std	Z+10, r16	; 0x0a
     daa:	81 e8       	ldi	r24, 0x81	; 129
     dac:	83 83       	std	Z+3, r24	; 0x03
     dae:	80 91 18 03 	lds	r24, 0x0318	; 0x800318 <__iob>
     db2:	90 91 19 03 	lds	r25, 0x0319	; 0x800319 <__iob+0x1>
     db6:	89 2b       	or	r24, r25
     db8:	21 f4       	brne	.+8      	; 0xdc2 <fdevopen+0x54>
     dba:	f0 93 19 03 	sts	0x0319, r31	; 0x800319 <__iob+0x1>
     dbe:	e0 93 18 03 	sts	0x0318, r30	; 0x800318 <__iob>
     dc2:	20 97       	sbiw	r28, 0x00	; 0
     dc4:	c9 f0       	breq	.+50     	; 0xdf8 <fdevopen+0x8a>
     dc6:	d1 87       	std	Z+9, r29	; 0x09
     dc8:	c0 87       	std	Z+8, r28	; 0x08
     dca:	83 81       	ldd	r24, Z+3	; 0x03
     dcc:	82 60       	ori	r24, 0x02	; 2
     dce:	83 83       	std	Z+3, r24	; 0x03
     dd0:	80 91 1a 03 	lds	r24, 0x031A	; 0x80031a <__iob+0x2>
     dd4:	90 91 1b 03 	lds	r25, 0x031B	; 0x80031b <__iob+0x3>
     dd8:	89 2b       	or	r24, r25
     dda:	71 f4       	brne	.+28     	; 0xdf8 <fdevopen+0x8a>
     ddc:	f0 93 1b 03 	sts	0x031B, r31	; 0x80031b <__iob+0x3>
     de0:	e0 93 1a 03 	sts	0x031A, r30	; 0x80031a <__iob+0x2>
     de4:	80 91 1c 03 	lds	r24, 0x031C	; 0x80031c <__iob+0x4>
     de8:	90 91 1d 03 	lds	r25, 0x031D	; 0x80031d <__iob+0x5>
     dec:	89 2b       	or	r24, r25
     dee:	21 f4       	brne	.+8      	; 0xdf8 <fdevopen+0x8a>
     df0:	f0 93 1d 03 	sts	0x031D, r31	; 0x80031d <__iob+0x5>
     df4:	e0 93 1c 03 	sts	0x031C, r30	; 0x80031c <__iob+0x4>
     df8:	cf 01       	movw	r24, r30
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	08 95       	ret

00000e04 <puts>:
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	e0 91 1a 03 	lds	r30, 0x031A	; 0x80031a <__iob+0x2>
     e10:	f0 91 1b 03 	lds	r31, 0x031B	; 0x80031b <__iob+0x3>
     e14:	23 81       	ldd	r18, Z+3	; 0x03
     e16:	21 ff       	sbrs	r18, 1
     e18:	1b c0       	rjmp	.+54     	; 0xe50 <puts+0x4c>
     e1a:	8c 01       	movw	r16, r24
     e1c:	d0 e0       	ldi	r29, 0x00	; 0
     e1e:	c0 e0       	ldi	r28, 0x00	; 0
     e20:	f8 01       	movw	r30, r16
     e22:	81 91       	ld	r24, Z+
     e24:	8f 01       	movw	r16, r30
     e26:	60 91 1a 03 	lds	r22, 0x031A	; 0x80031a <__iob+0x2>
     e2a:	70 91 1b 03 	lds	r23, 0x031B	; 0x80031b <__iob+0x3>
     e2e:	db 01       	movw	r26, r22
     e30:	18 96       	adiw	r26, 0x08	; 8
     e32:	ed 91       	ld	r30, X+
     e34:	fc 91       	ld	r31, X
     e36:	19 97       	sbiw	r26, 0x09	; 9
     e38:	88 23       	and	r24, r24
     e3a:	31 f0       	breq	.+12     	; 0xe48 <puts+0x44>
     e3c:	09 95       	icall
     e3e:	89 2b       	or	r24, r25
     e40:	79 f3       	breq	.-34     	; 0xe20 <puts+0x1c>
     e42:	df ef       	ldi	r29, 0xFF	; 255
     e44:	cf ef       	ldi	r28, 0xFF	; 255
     e46:	ec cf       	rjmp	.-40     	; 0xe20 <puts+0x1c>
     e48:	8a e0       	ldi	r24, 0x0A	; 10
     e4a:	09 95       	icall
     e4c:	89 2b       	or	r24, r25
     e4e:	19 f0       	breq	.+6      	; 0xe56 <puts+0x52>
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	9f ef       	ldi	r25, 0xFF	; 255
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <puts+0x56>
     e56:	8d 2f       	mov	r24, r29
     e58:	9c 2f       	mov	r25, r28
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	08 95       	ret

00000e64 <calloc>:
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	86 9f       	mul	r24, r22
     e6e:	80 01       	movw	r16, r0
     e70:	87 9f       	mul	r24, r23
     e72:	10 0d       	add	r17, r0
     e74:	96 9f       	mul	r25, r22
     e76:	10 0d       	add	r17, r0
     e78:	11 24       	eor	r1, r1
     e7a:	c8 01       	movw	r24, r16
     e7c:	0e 94 4e 07 	call	0xe9c	; 0xe9c <malloc>
     e80:	ec 01       	movw	r28, r24
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	29 f0       	breq	.+10     	; 0xe90 <calloc+0x2c>
     e86:	a8 01       	movw	r20, r16
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	0e 94 6f 08 	call	0x10de	; 0x10de <memset>
     e90:	ce 01       	movw	r24, r28
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	08 95       	ret

00000e9c <malloc>:
     e9c:	0f 93       	push	r16
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
     ea4:	82 30       	cpi	r24, 0x02	; 2
     ea6:	91 05       	cpc	r25, r1
     ea8:	10 f4       	brcc	.+4      	; 0xeae <malloc+0x12>
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	e0 91 20 03 	lds	r30, 0x0320	; 0x800320 <__flp>
     eb2:	f0 91 21 03 	lds	r31, 0x0321	; 0x800321 <__flp+0x1>
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	a0 e0       	ldi	r26, 0x00	; 0
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	30 97       	sbiw	r30, 0x00	; 0
     ec0:	19 f1       	breq	.+70     	; 0xf08 <malloc+0x6c>
     ec2:	40 81       	ld	r20, Z
     ec4:	51 81       	ldd	r21, Z+1	; 0x01
     ec6:	02 81       	ldd	r16, Z+2	; 0x02
     ec8:	13 81       	ldd	r17, Z+3	; 0x03
     eca:	48 17       	cp	r20, r24
     ecc:	59 07       	cpc	r21, r25
     ece:	c8 f0       	brcs	.+50     	; 0xf02 <malloc+0x66>
     ed0:	84 17       	cp	r24, r20
     ed2:	95 07       	cpc	r25, r21
     ed4:	69 f4       	brne	.+26     	; 0xef0 <malloc+0x54>
     ed6:	10 97       	sbiw	r26, 0x00	; 0
     ed8:	31 f0       	breq	.+12     	; 0xee6 <malloc+0x4a>
     eda:	12 96       	adiw	r26, 0x02	; 2
     edc:	0c 93       	st	X, r16
     ede:	12 97       	sbiw	r26, 0x02	; 2
     ee0:	13 96       	adiw	r26, 0x03	; 3
     ee2:	1c 93       	st	X, r17
     ee4:	27 c0       	rjmp	.+78     	; 0xf34 <malloc+0x98>
     ee6:	00 93 20 03 	sts	0x0320, r16	; 0x800320 <__flp>
     eea:	10 93 21 03 	sts	0x0321, r17	; 0x800321 <__flp+0x1>
     eee:	22 c0       	rjmp	.+68     	; 0xf34 <malloc+0x98>
     ef0:	21 15       	cp	r18, r1
     ef2:	31 05       	cpc	r19, r1
     ef4:	19 f0       	breq	.+6      	; 0xefc <malloc+0x60>
     ef6:	42 17       	cp	r20, r18
     ef8:	53 07       	cpc	r21, r19
     efa:	18 f4       	brcc	.+6      	; 0xf02 <malloc+0x66>
     efc:	9a 01       	movw	r18, r20
     efe:	bd 01       	movw	r22, r26
     f00:	ef 01       	movw	r28, r30
     f02:	df 01       	movw	r26, r30
     f04:	f8 01       	movw	r30, r16
     f06:	db cf       	rjmp	.-74     	; 0xebe <malloc+0x22>
     f08:	21 15       	cp	r18, r1
     f0a:	31 05       	cpc	r19, r1
     f0c:	f9 f0       	breq	.+62     	; 0xf4c <malloc+0xb0>
     f0e:	28 1b       	sub	r18, r24
     f10:	39 0b       	sbc	r19, r25
     f12:	24 30       	cpi	r18, 0x04	; 4
     f14:	31 05       	cpc	r19, r1
     f16:	80 f4       	brcc	.+32     	; 0xf38 <malloc+0x9c>
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	9b 81       	ldd	r25, Y+3	; 0x03
     f1c:	61 15       	cp	r22, r1
     f1e:	71 05       	cpc	r23, r1
     f20:	21 f0       	breq	.+8      	; 0xf2a <malloc+0x8e>
     f22:	fb 01       	movw	r30, r22
     f24:	93 83       	std	Z+3, r25	; 0x03
     f26:	82 83       	std	Z+2, r24	; 0x02
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <malloc+0x96>
     f2a:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <__flp+0x1>
     f2e:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <__flp>
     f32:	fe 01       	movw	r30, r28
     f34:	32 96       	adiw	r30, 0x02	; 2
     f36:	44 c0       	rjmp	.+136    	; 0xfc0 <malloc+0x124>
     f38:	fe 01       	movw	r30, r28
     f3a:	e2 0f       	add	r30, r18
     f3c:	f3 1f       	adc	r31, r19
     f3e:	81 93       	st	Z+, r24
     f40:	91 93       	st	Z+, r25
     f42:	22 50       	subi	r18, 0x02	; 2
     f44:	31 09       	sbc	r19, r1
     f46:	39 83       	std	Y+1, r19	; 0x01
     f48:	28 83       	st	Y, r18
     f4a:	3a c0       	rjmp	.+116    	; 0xfc0 <malloc+0x124>
     f4c:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <__brkval>
     f50:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <__brkval+0x1>
     f54:	23 2b       	or	r18, r19
     f56:	41 f4       	brne	.+16     	; 0xf68 <malloc+0xcc>
     f58:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     f5c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     f60:	30 93 1f 03 	sts	0x031F, r19	; 0x80031f <__brkval+0x1>
     f64:	20 93 1e 03 	sts	0x031E, r18	; 0x80031e <__brkval>
     f68:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f6c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f70:	21 15       	cp	r18, r1
     f72:	31 05       	cpc	r19, r1
     f74:	41 f4       	brne	.+16     	; 0xf86 <malloc+0xea>
     f76:	2d b7       	in	r18, 0x3d	; 61
     f78:	3e b7       	in	r19, 0x3e	; 62
     f7a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     f7e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     f82:	24 1b       	sub	r18, r20
     f84:	35 0b       	sbc	r19, r21
     f86:	e0 91 1e 03 	lds	r30, 0x031E	; 0x80031e <__brkval>
     f8a:	f0 91 1f 03 	lds	r31, 0x031F	; 0x80031f <__brkval+0x1>
     f8e:	e2 17       	cp	r30, r18
     f90:	f3 07       	cpc	r31, r19
     f92:	a0 f4       	brcc	.+40     	; 0xfbc <malloc+0x120>
     f94:	2e 1b       	sub	r18, r30
     f96:	3f 0b       	sbc	r19, r31
     f98:	28 17       	cp	r18, r24
     f9a:	39 07       	cpc	r19, r25
     f9c:	78 f0       	brcs	.+30     	; 0xfbc <malloc+0x120>
     f9e:	ac 01       	movw	r20, r24
     fa0:	4e 5f       	subi	r20, 0xFE	; 254
     fa2:	5f 4f       	sbci	r21, 0xFF	; 255
     fa4:	24 17       	cp	r18, r20
     fa6:	35 07       	cpc	r19, r21
     fa8:	48 f0       	brcs	.+18     	; 0xfbc <malloc+0x120>
     faa:	4e 0f       	add	r20, r30
     fac:	5f 1f       	adc	r21, r31
     fae:	50 93 1f 03 	sts	0x031F, r21	; 0x80031f <__brkval+0x1>
     fb2:	40 93 1e 03 	sts	0x031E, r20	; 0x80031e <__brkval>
     fb6:	81 93       	st	Z+, r24
     fb8:	91 93       	st	Z+, r25
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <malloc+0x124>
     fbc:	e0 e0       	ldi	r30, 0x00	; 0
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	cf 01       	movw	r24, r30
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	08 95       	ret

00000fcc <free>:
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <free+0xa>
     fd4:	81 c0       	rjmp	.+258    	; 0x10d8 <free+0x10c>
     fd6:	fc 01       	movw	r30, r24
     fd8:	32 97       	sbiw	r30, 0x02	; 2
     fda:	13 82       	std	Z+3, r1	; 0x03
     fdc:	12 82       	std	Z+2, r1	; 0x02
     fde:	a0 91 20 03 	lds	r26, 0x0320	; 0x800320 <__flp>
     fe2:	b0 91 21 03 	lds	r27, 0x0321	; 0x800321 <__flp+0x1>
     fe6:	10 97       	sbiw	r26, 0x00	; 0
     fe8:	81 f4       	brne	.+32     	; 0x100a <free+0x3e>
     fea:	20 81       	ld	r18, Z
     fec:	31 81       	ldd	r19, Z+1	; 0x01
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <__brkval>
     ff6:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <__brkval+0x1>
     ffa:	28 17       	cp	r18, r24
     ffc:	39 07       	cpc	r19, r25
     ffe:	51 f5       	brne	.+84     	; 0x1054 <free+0x88>
    1000:	f0 93 1f 03 	sts	0x031F, r31	; 0x80031f <__brkval+0x1>
    1004:	e0 93 1e 03 	sts	0x031E, r30	; 0x80031e <__brkval>
    1008:	67 c0       	rjmp	.+206    	; 0x10d8 <free+0x10c>
    100a:	ed 01       	movw	r28, r26
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	ce 17       	cp	r28, r30
    1012:	df 07       	cpc	r29, r31
    1014:	40 f4       	brcc	.+16     	; 0x1026 <free+0x5a>
    1016:	4a 81       	ldd	r20, Y+2	; 0x02
    1018:	5b 81       	ldd	r21, Y+3	; 0x03
    101a:	9e 01       	movw	r18, r28
    101c:	41 15       	cp	r20, r1
    101e:	51 05       	cpc	r21, r1
    1020:	f1 f0       	breq	.+60     	; 0x105e <free+0x92>
    1022:	ea 01       	movw	r28, r20
    1024:	f5 cf       	rjmp	.-22     	; 0x1010 <free+0x44>
    1026:	d3 83       	std	Z+3, r29	; 0x03
    1028:	c2 83       	std	Z+2, r28	; 0x02
    102a:	40 81       	ld	r20, Z
    102c:	51 81       	ldd	r21, Z+1	; 0x01
    102e:	84 0f       	add	r24, r20
    1030:	95 1f       	adc	r25, r21
    1032:	c8 17       	cp	r28, r24
    1034:	d9 07       	cpc	r29, r25
    1036:	59 f4       	brne	.+22     	; 0x104e <free+0x82>
    1038:	88 81       	ld	r24, Y
    103a:	99 81       	ldd	r25, Y+1	; 0x01
    103c:	84 0f       	add	r24, r20
    103e:	95 1f       	adc	r25, r21
    1040:	02 96       	adiw	r24, 0x02	; 2
    1042:	91 83       	std	Z+1, r25	; 0x01
    1044:	80 83       	st	Z, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	93 83       	std	Z+3, r25	; 0x03
    104c:	82 83       	std	Z+2, r24	; 0x02
    104e:	21 15       	cp	r18, r1
    1050:	31 05       	cpc	r19, r1
    1052:	29 f4       	brne	.+10     	; 0x105e <free+0x92>
    1054:	f0 93 21 03 	sts	0x0321, r31	; 0x800321 <__flp+0x1>
    1058:	e0 93 20 03 	sts	0x0320, r30	; 0x800320 <__flp>
    105c:	3d c0       	rjmp	.+122    	; 0x10d8 <free+0x10c>
    105e:	e9 01       	movw	r28, r18
    1060:	fb 83       	std	Y+3, r31	; 0x03
    1062:	ea 83       	std	Y+2, r30	; 0x02
    1064:	49 91       	ld	r20, Y+
    1066:	59 91       	ld	r21, Y+
    1068:	c4 0f       	add	r28, r20
    106a:	d5 1f       	adc	r29, r21
    106c:	ec 17       	cp	r30, r28
    106e:	fd 07       	cpc	r31, r29
    1070:	61 f4       	brne	.+24     	; 0x108a <free+0xbe>
    1072:	80 81       	ld	r24, Z
    1074:	91 81       	ldd	r25, Z+1	; 0x01
    1076:	84 0f       	add	r24, r20
    1078:	95 1f       	adc	r25, r21
    107a:	02 96       	adiw	r24, 0x02	; 2
    107c:	e9 01       	movw	r28, r18
    107e:	99 83       	std	Y+1, r25	; 0x01
    1080:	88 83       	st	Y, r24
    1082:	82 81       	ldd	r24, Z+2	; 0x02
    1084:	93 81       	ldd	r25, Z+3	; 0x03
    1086:	9b 83       	std	Y+3, r25	; 0x03
    1088:	8a 83       	std	Y+2, r24	; 0x02
    108a:	e0 e0       	ldi	r30, 0x00	; 0
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	12 96       	adiw	r26, 0x02	; 2
    1090:	8d 91       	ld	r24, X+
    1092:	9c 91       	ld	r25, X
    1094:	13 97       	sbiw	r26, 0x03	; 3
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	19 f0       	breq	.+6      	; 0x10a0 <free+0xd4>
    109a:	fd 01       	movw	r30, r26
    109c:	dc 01       	movw	r26, r24
    109e:	f7 cf       	rjmp	.-18     	; 0x108e <free+0xc2>
    10a0:	8d 91       	ld	r24, X+
    10a2:	9c 91       	ld	r25, X
    10a4:	11 97       	sbiw	r26, 0x01	; 1
    10a6:	9d 01       	movw	r18, r26
    10a8:	2e 5f       	subi	r18, 0xFE	; 254
    10aa:	3f 4f       	sbci	r19, 0xFF	; 255
    10ac:	82 0f       	add	r24, r18
    10ae:	93 1f       	adc	r25, r19
    10b0:	20 91 1e 03 	lds	r18, 0x031E	; 0x80031e <__brkval>
    10b4:	30 91 1f 03 	lds	r19, 0x031F	; 0x80031f <__brkval+0x1>
    10b8:	28 17       	cp	r18, r24
    10ba:	39 07       	cpc	r19, r25
    10bc:	69 f4       	brne	.+26     	; 0x10d8 <free+0x10c>
    10be:	30 97       	sbiw	r30, 0x00	; 0
    10c0:	29 f4       	brne	.+10     	; 0x10cc <free+0x100>
    10c2:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <__flp+0x1>
    10c6:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <__flp>
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <free+0x104>
    10cc:	13 82       	std	Z+3, r1	; 0x03
    10ce:	12 82       	std	Z+2, r1	; 0x02
    10d0:	b0 93 1f 03 	sts	0x031F, r27	; 0x80031f <__brkval+0x1>
    10d4:	a0 93 1e 03 	sts	0x031E, r26	; 0x80031e <__brkval>
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <memset>:
    10de:	dc 01       	movw	r26, r24
    10e0:	01 c0       	rjmp	.+2      	; 0x10e4 <memset+0x6>
    10e2:	6d 93       	st	X+, r22
    10e4:	41 50       	subi	r20, 0x01	; 1
    10e6:	50 40       	sbci	r21, 0x00	; 0
    10e8:	e0 f7       	brcc	.-8      	; 0x10e2 <memset+0x4>
    10ea:	08 95       	ret

000010ec <_exit>:
    10ec:	f8 94       	cli

000010ee <__stop_program>:
    10ee:	ff cf       	rjmp	.-2      	; 0x10ee <__stop_program>
